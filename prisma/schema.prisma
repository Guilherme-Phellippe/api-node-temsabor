generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id            String   @id @default(uuid())
  categoryId    String
  userId        String
  name_recipe   String
  images_recipe Json[]
  videos_recipe String[]
  time          Int
  portion       Int
  ing           String[]
  stuffing_ing  String[] @default([])
  word_key      String[]
  prepareMode   String
  nmr_hearts    String[] @default([])
  nmr_saved     String[] @default([])
  nmr_eyes      Int      @default(0)
  votes         String[]
  createdAt     DateTime @default(now())

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  recipeId  String
  userId    String
  comment   String
  answer    Json[]
  createdAt DateTime @default(now())

  recipe Recipe @relation(fields: [recipeId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id         String   @id @default(uuid())
  name       String
  photo      String   @default("https://i.ibb.co/JCNSM0R/143086968-2856368904622192-1959732218791162458-n.png")
  email      String   @unique
  password   String
  nmr_hearts Int      @default(0)
  nmr_eyes   Int      @default(0)
  nmr_saved  String[] @default([])
  admin      Boolean  @default(false)
  createdAt  DateTime @default(now())

  winner           Winner?            @relation("winnerUser")
  recipe           Recipe[]
  comments         Comment[]
  notificationUser NotificationUser[]
}

model Category {
  id            String   @id @default(uuid())
  name_category String   @unique
  suggestion    Int      @default(0)
  createdAt     DateTime @default(now())

  recipe Recipe[]
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  isLink    Boolean  @default(false)
  createdAt DateTime @default(now())

  NotificationUser NotificationUser[]
}

model NotificationUser {
  notificationId String
  userId         String
  createdAt      DateTime @default(now())
  read           Boolean  @default(false)

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@id([userId, notificationId])
}

model Winner {
  id      String   @id @default(uuid())
  userId  String   @unique
  rank    String[]
  prizeId String
  month   Int
  year    Int

  user  User  @relation("winnerUser", fields: [userId], references: [id])
  Prize Prize @relation(fields: [prizeId], references: [id])
}

model Prize {
  id        String   @id @default(uuid())
  image     String
  name      String
  price     Int
  available Boolean  @default(false)
  createdAt DateTime @default(now())

  winner Winner[]
}
